import 'dart:convert';

// Sales Order Item class
class SalesOrderItem {
  String name;
  String owner;
  DateTime creation;
  DateTime modified;
  String modifiedBy;
  String parent;
  String parentfield;
  String parenttype;
  int idx;
  int docstatus;
  String itemCode;
  int ensureDeliveryBasedOnProducedSerialNo;
  DateTime deliveryDate;
  String itemName;
  String description;
  String gstHsnCode;
  int isNilExempt;
  int isNonGst;
  String itemGroup;
  String brand;
  String gstPer;
  String image;
  int qty;
  String stockUom;
  int pickedQty;
  String uom;
  int conversionFactor;
  int stockQty;
  double priceListRate;
  double basePriceListRate;
  String marginType;
  double marginRateOrAmount;
  double rateWithMargin;
  double discountPercentage;
  double discountAmount;
  double baseRateWithMargin;
  double rate;
  double amount;
  String itemTaxTemplate;
  double baseRate;
  double baseAmount;
  String pricingRules;
  double stockUomRate;
  int isFreeItem;
  int grantCommission;
  int raiseQuestionnaire;
  double netRate;
  double netAmount;
  double baseNetRate;
  double baseNetAmount;
  double billedAmt;
  double valuationRate;
  double grossProfit;
  int deliveredBySupplier;
  double weightPerUnit;
  double totalWeight;
  String warehouse;
  int againstBlanketOrder;
  double blanketOrderRate;
  int projectedQty;
  int actualQty;
  int orderedQty;
  int plannedQty;
  int workOrderQty;
  int producedQty;
  int deliveredQty;
  int returnedQty;
  int pageBreak;
  Map<String, double> itemTaxRate;
  DateTime transactionDate;
  String doctype;

  SalesOrderItem({
    required this.name,
    required this.owner,
    required this.creation,
    required this.modified,
    required this.modifiedBy,
    required this.parent,
    required this.parentfield,
    required this.parenttype,
    required this.idx,
    required this.docstatus,
    required this.itemCode,
    required this.ensureDeliveryBasedOnProducedSerialNo,
    required this.deliveryDate,
    required this.itemName,
    required this.description,
    required this.gstHsnCode,
    required this.isNilExempt,
    required this.isNonGst,
    required this.itemGroup,
    required this.brand,
    required this.gstPer,
    required this.image,
    required this.qty,
    required this.stockUom,
    required this.pickedQty,
    required this.uom,
    required this.conversionFactor,
    required this.stockQty,
    required this.priceListRate,
    required this.basePriceListRate,
    required this.marginType,
    required this.marginRateOrAmount,
    required this.rateWithMargin,
    required this.discountPercentage,
    required this.discountAmount,
    required this.baseRateWithMargin,
    required this.rate,
    required this.amount,
    required this.itemTaxTemplate,
    required this.baseRate,
    required this.baseAmount,
    required this.pricingRules,
    required this.stockUomRate,
    required this.isFreeItem,
    required this.grantCommission,
    required this.raiseQuestionnaire,
    required this.netRate,
    required this.netAmount,
    required this.baseNetRate,
    required this.baseNetAmount,
    required this.billedAmt,
    required this.valuationRate,
    required this.grossProfit,
    required this.deliveredBySupplier,
    required this.weightPerUnit,
    required this.totalWeight,
    required this.warehouse,
    required this.againstBlanketOrder,
    required this.blanketOrderRate,
    required this.projectedQty,
    required this.actualQty,
    required this.orderedQty,
    required this.plannedQty,
    required this.workOrderQty,
    required this.producedQty,
    required this.deliveredQty,
    required this.returnedQty,
    required this.pageBreak,
    required this.itemTaxRate,
    required this.transactionDate,
    required this.doctype,
  });

  factory SalesOrderItem.fromJson(Map<String, dynamic> json) {
    return SalesOrderItem(
      name: json['name'],
      owner: json['owner'],
      creation: DateTime.parse(json['creation']),
      modified: DateTime.parse(json['modified']),
      modifiedBy: json['modified_by'],
      parent: json['parent'],
      parentfield: json['parentfield'],
      parenttype: json['parenttype'],
      idx: json['idx'],
      docstatus: json['docstatus'],
      itemCode: json['item_code'],
      ensureDeliveryBasedOnProducedSerialNo: json['ensure_delivery_based_on_produced_serial_no'],
      deliveryDate: DateTime.parse(json['delivery_date']),
      itemName: json['item_name'],
      description: json['description'],
      gstHsnCode: json['gst_hsn_code'],
      isNilExempt: json['is_nil_exempt'],
      isNonGst: json['is_non_gst'],
      itemGroup: json['item_group'],
      brand: json['brand'],
      gstPer: json['gst_per'],
      image: json['image'],
      qty: json['qty'],
      stockUom: json['stock_uom'],
      pickedQty: json['picked_qty'],
      uom: json['uom'],
      conversionFactor: json['conversion_factor'],
      stockQty: json['stock_qty'],
      priceListRate: json['price_list_rate'].toDouble(),
      basePriceListRate: json['base_price_list_rate'].toDouble(),
      marginType: json['margin_type'],
      marginRateOrAmount: json['margin_rate_or_amount'].toDouble(),
      rateWithMargin: json['rate_with_margin'].toDouble(),
      discountPercentage: json['discount_percentage'].toDouble(),
      discountAmount: json['discount_amount'].toDouble(),
      baseRateWithMargin: json['base_rate_with_margin'].toDouble(),
      rate: json['rate'].toDouble(),
      amount: json['amount'].toDouble(),
      itemTaxTemplate: json['item_tax_template'],
      baseRate: json['base_rate'].toDouble(),
      baseAmount: json['base_amount'].toDouble(),
      pricingRules: json['pricing_rules'],
      stockUomRate: json['stock_uom_rate'].toDouble(),
      isFreeItem: json['is_free_item'],
      grantCommission: json['grant_commission'],
      raiseQuestionnaire: json['raise_questionnaire'],
      netRate: json['net_rate'].toDouble(),
      netAmount: json['net_amount'].toDouble(),
      baseNetRate: json['base_net_rate'].toDouble(),
      baseNetAmount: json['base_net_amount'].toDouble(),
      billedAmt: json['billed_amt'].toDouble(),
      valuationRate: json['valuation_rate'].toDouble(),
      grossProfit: json['gross_profit'].toDouble(),
      deliveredBySupplier: json['delivered_by_supplier'],
      weightPerUnit: json['weight_per_unit'].toDouble(),
      totalWeight: json['total_weight'].toDouble(),
      warehouse: json['warehouse'],
      againstBlanketOrder: json['against_blanket_order'],
      blanketOrderRate: json['blanket_order_rate'].toDouble(),
      projectedQty: json['projected_qty'],
      actualQty: json['actual_qty'],
      orderedQty: json['ordered_qty'],
      plannedQty: json['planned_qty'],
      workOrderQty: json['work_order_qty'],
      producedQty: json['produced_qty'],
      deliveredQty: json['delivered_qty'],
      returnedQty: json['returned_qty'],
      pageBreak: json['page_break'],
      itemTaxRate: Map<String, double>.from(jsonDecode(json['item_tax_rate'])),
      transactionDate: DateTime.parse(json['transaction_date']),
      doctype: json['doctype'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'owner': owner,
      'creation': creation.toIso8601String(),
      'modified': modified.toIso8601String(),
      'modified_by': modifiedBy,
      'parent': parent,
      'parentfield': parentfield,
      'parenttype': parenttype,
      'idx': idx,
      'docstatus': docstatus,
      'item_code': itemCode,
      'ensure_delivery_based_on_produced_serial_no': ensureDeliveryBasedOnProducedSerialNo,
      'delivery_date': deliveryDate.toIso8601String(),
      'item_name': itemName,
      'description': description,
      'gst_hsn_code': gstHsnCode,
      'is_nil_exempt': isNilExempt,
      'is_non_gst': isNonGst,
      'item_group': itemGroup,
      'brand': brand,
      'gst_per': gstPer,
      'image': image,
      'qty': qty,
      'stock_uom': stockUom,
      'picked_qty': pickedQty,
      'uom': uom,
      'conversion_factor': conversionFactor,
      'stock_qty': stockQty,
      'price_list_rate': priceListRate,
      'base_price_list_rate': basePriceListRate,
      'margin_type': marginType,
      'margin_rate_or_amount': marginRateOrAmount,
      'rate_with_margin': rateWithMargin,
      'discount_percentage': discountPercentage,
      'discount_amount': discountAmount,
      'base_rate_with_margin': baseRateWithMargin,
      'rate': rate,
      'amount': amount,
      'item_tax_template': itemTaxTemplate,
      'base_rate': baseRate,
      'base_amount': baseAmount,
      'pricing_rules': pricingRules,
      'stock_uom_rate': stockUomRate,
      'is_free_item': isFreeItem,
      'grant_commission': grantCommission,
      'raise_questionnaire': raiseQuestionnaire,
      'net_rate': netRate,
      'net_amount': netAmount,
      'base_net_rate': baseNetRate,
      'base_net_amount': baseNetAmount,
      'billed_amt': billedAmt,
      'valuation_rate': valuationRate,
      'gross_profit': grossProfit,
      'delivered_by_supplier': deliveredBySupplier,
      'weight_per_unit': weightPerUnit,
      'total_weight': totalWeight,
      'warehouse': warehouse,
      'against_blanket_order': againstBlanketOrder,
      'blanket_order_rate': blanketOrderRate,
      'projected_qty': projectedQty,
      'actual_qty': actualQty,
      'ordered_qty': orderedQty,
      'planned_qty': plannedQty,
      'work_order_qty': workOrderQty,
      'produced_qty': producedQty,
      'delivered_qty': deliveredQty,
      'returned_qty': returnedQty,
      'page_break': pageBreak,
      'item_tax_rate': jsonEncode(itemTaxRate),
      'transaction_date': transactionDate.toIso8601String(),
      'doctype': doctype,
    };
  }
}


